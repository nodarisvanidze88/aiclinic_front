name: Build & Deploy (Frontend)

on:
    push:
        branches: [main]

env:
    IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/aiclinic-frontend:latest

jobs:
    build-push:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            - uses: actions/checkout@v4

            - name: Log in to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build & push image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ env.IMAGE_NAME }}

    deploy:
        runs-on: ubuntu-latest
        needs: build-push
        steps:
            - name: Restart container on frontend droplet (network mode)
              uses: appleboy/ssh-action@v1
              with:
                  host: ${{ secrets.DO_FRONT_HOST }}
                  username: ${{ secrets.DO_FRONT_USER }}
                  password: ${{ secrets.DO_FRONT_PASS }}
                  envs: IMAGE_NAME
                  script: |
                      set -e
                      # ensure shared network exists
                      docker network create web || true

                      # ensure caddy is attached to that network (safe if already)
                      docker network connect web caddy || true

                      # redeploy frontend
                      docker rm -f aiclinic-front || true
                      docker pull $IMAGE_NAME
                      docker run -d --name aiclinic-front \
                        --restart always \
                        --network web \
                        -p 8080:80 \
                        $IMAGE_NAME

                      # quick local health check (non-fatal)
                      curl -sI http://127.0.0.1:8080/health || true

                      # optional cleanup
                      docker image prune -f || true
